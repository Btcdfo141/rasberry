{
  "config": {
    "step": {
      "user": {
        "data": {
          "name": "[%key:common::config_flow::data::name%]",
          "heater": "Heater",
          "target_sensor": "Target sensor"
        },
        "data_description": {
          "heater": "Entity for heater switch, must be a toggle device. Becomes air conditioning switch when AC mode is set to true."
        }
      }
    },
    "error": {
      "invalid_device_class_temperature": "The selected target sensor is not a temperature sensor."
    },
    "abort": {
      "already_configured": "Device is already configured. Meaning the `heater` and `target_sensor` are already configured in a different entity."
    }
  },
  "options": {
    "step": {
      "init": {
        "description": "These values allow tweaking the thermostat. Please refer to the documentation if a field is unclear.",
        "data": {
          "ac_mode": "AC mode",
          "min_cycle_duration": "Minimum cycle duration",
          "cold_tolerance": "Cold tolerance",
          "hot_tolerance": "Hot tolerance",
          "min_temp": "Minimum temperature",
          "max_temp": "Maximum temperature",
          "target_temp": "Target temperature",
          "initial_hvac_mode": "Initial HVAC mode",
          "away_temp": "Away temperature",
          "eco_temp": "Eco temperature",
          "comfort_temp": "Comfort temperature",
          "home_temp": "Home temperature",
          "sleep_temp": "Sleep temperature",
          "activity_temp": "Activity temperature",
          "precision": "Precision",
          "send_if_off": "Send if off",
          "keep_alive": "Keep alive",
          "target_temp_step": "Target temperature step"
        },
        "data_description": {
          "ac_mode": "Set the switch specified in the heater option to be treated as a cooling device instead of a heating device.",
          "min_cycle_duration": "Set a minimum amount of time that the switch specified in the heater option must be in its current state prior to being switched either off or on. This option will be ignored if the keep_alive option is set.",
          "cold_tolerance": "Set a minimum amount of difference between the temperature read by the sensor specified in the target_sensor option and the target temperature that must change prior to being switched on. For example, if the target temperature is 25°C and the tolerance is 0.5 the heater will start when the sensor equals or goes below 24.5.",
          "hot_tolerance": "Set a minimum amount of difference between the temperature read by the sensor specified in the target_sensor option and the target temperature that must change prior to being switched off. For example, if the target temperature is 25°C and the tolerance is 0.5 the heater will stop when the sensor equals or goes above 25.5.",
          "min_temp": "Set minimum set point available. Default is 7.0°C.",
          "max_temp": "Set maximum set point available.",
          "target_temp": "Set initial target temperature. Failure to set this variable will result in target temperature being set to null on startup. As of version 0.59, it will retain the target temperature set before restart if available.",
          "target_temp_step": "Set the step size for setting the target temperature. Default is 0.1 for Celsius and 1.0 for Fahrenheit.",
          "initial_hvac_mode": "Set the initial HVAC mode. Valid values are off, heat or cool. Value has to be double quoted. If this parameter is not set, it is preferable to set a keep_alive value. This is helpful to align any discrepancies between generic_thermostat and heater state.",
          "away_temp": "Set the temperature used by preset_mode: away.",
          "eco_temp": "Set the temperature used by preset_mode: eco.",
          "comfort_temp": "Set the temperature used by preset_mode: comfort.",
          "home_temp": "Set the temperature used by preset_mode: home.",
          "sleep_temp": "Set the temperature used by preset_mode: sleep.",
          "activity_temp": "Set the temperature used by preset_mode: activity.",
          "precision": "The desired precision for this device. Can be used to match your actual thermostat’s precision. Supported values are 0.1, 0.5 and 1.0. This value is also used as the step size for setting the target temperature.\nDefault: 0.1 for Celsius and 1.0 for Fahrenheit.",
          "send_if_off": "If true, the thermostat will send the target temperature to the heater switch even if it is turned off.",
          "keep_alive": "Set a keep-alive interval. If set, the switch specified in the heater option will be triggered every time the interval elapses. Use with heaters and A/C units that shut off if they don’t receive a signal from their remote for a while. Use also with switches that might lose state. The keep-alive call is done with the current valid climate integration state (either on or off). When keep_alive is set the min_cycle_duration option will be ignored."
        }
      }
    }
  },
  "services": {
    "reload": {
      "name": "[%key:common::action::reload%]",
      "description": "Reloads generic thermostats from the YAML-configuration."
    }
  },
  "issues": {
    "deprecated_yaml_import": {
      "title": "Configuration imported",
      "description": "Configuring the Generic Thermostat named `{name}` using YAML is being removed.\nRemove the YAML configuration and restart Home Assistant."
    },
    "import_aborted": {
      "title": "Import aborted",
      "description": "Configuring the Generic Thermostat named `{name}` using YAML is being removed.\n The import was aborted, due to an existing config entry being the same as the data being imported in the YAML. Remove the YAML configuration and restart Home Assistant. Please use the UI to configure the Generic Thermostat."
    },
    "import_failed": {
      "title": "Failed to import",
      "description": "Failed to import the configuration for the Generic Thermostat named `{name}`. Please use the UI to configure the Generic Thermostat. Don't forget to delete the YAML configuration."
    }
  }
}
