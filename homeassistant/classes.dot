digraph "classes" {
rankdir=BT
charset="utf-8"
"homeassistant.auth.permissions.AbstractPermissions" [color="black", fontcolor="black", label=<{AbstractPermissions|<br ALIGN="LEFT"/>|<I>access_all_entities</I>(key: str): bool<br ALIGN="LEFT"/>check_entity(entity_id: str, key: str): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.AuthManager" [color="black", fontcolor="black", label=<{AuthManager|auth_mfa_modules<br ALIGN="LEFT"/>auth_providers<br ALIGN="LEFT"/>hass : HomeAssistant<br ALIGN="LEFT"/>login_flow<br ALIGN="LEFT"/>|async_activate_user(user: models.User): None<br ALIGN="LEFT"/>async_create_access_token(refresh_token: models.RefreshToken, remote_ip: str | None): str<br ALIGN="LEFT"/>async_create_refresh_token(user: models.User, client_id: str | None, client_name: str | None, client_icon: str | None, token_type: str | None, access_token_expiration: timedelta, credential: models.Credentials | None): models.RefreshToken<br ALIGN="LEFT"/>async_create_system_user(name: str): models.User<br ALIGN="LEFT"/>async_create_user(name: str): models.User<br ALIGN="LEFT"/>async_deactivate_user(user: models.User): None<br ALIGN="LEFT"/>async_disable_user_mfa(user: models.User, mfa_module_id: str): None<br ALIGN="LEFT"/>async_enable_user_mfa(user: models.User, mfa_module_id: str, data: Any): None<br ALIGN="LEFT"/>async_get_enabled_mfa(user: models.User): dict[str, str]<br ALIGN="LEFT"/>async_get_group(group_id: str): models.Group \| None<br ALIGN="LEFT"/>async_get_or_create_user(credentials: models.Credentials): models.User<br ALIGN="LEFT"/>async_get_owner(): models.User \| None<br ALIGN="LEFT"/>async_get_refresh_token(token_id: str): models.RefreshToken \| None<br ALIGN="LEFT"/>async_get_refresh_token_by_token(token: str): models.RefreshToken \| None<br ALIGN="LEFT"/>async_get_user(user_id: str): models.User \| None<br ALIGN="LEFT"/>async_get_user_by_credentials(credentials: models.Credentials): models.User \| None<br ALIGN="LEFT"/>async_get_users(): list[models.User]<br ALIGN="LEFT"/>async_link_user(user: models.User, credentials: models.Credentials): None<br ALIGN="LEFT"/>async_register_revoke_token_callback(refresh_token_id: str, revoke_callback: CALLBACK_TYPE): CALLBACK_TYPE<br ALIGN="LEFT"/>async_remove_credentials(credentials: models.Credentials): None<br ALIGN="LEFT"/>async_remove_refresh_token(refresh_token: models.RefreshToken): None<br ALIGN="LEFT"/>async_remove_user(user: models.User): None<br ALIGN="LEFT"/>async_update_user(user: models.User, name: str | None, is_active: bool | None, group_ids: list[str] | None, local_only: bool | None): None<br ALIGN="LEFT"/>async_validate_access_token(token: str): models.RefreshToken \| None<br ALIGN="LEFT"/>async_validate_refresh_token(refresh_token: models.RefreshToken, remote_ip: str | None): None<br ALIGN="LEFT"/>get_auth_mfa_module(module_id: str): MultiFactorAuthModule \| None<br ALIGN="LEFT"/>get_auth_provider(provider_type: str, provider_id: str | None): AuthProvider \| None<br ALIGN="LEFT"/>get_auth_providers(provider_type: str): list[AuthProvider]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.AuthManagerFlowManager" [color="black", fontcolor="black", label=<{AuthManagerFlowManager|auth_manager<br ALIGN="LEFT"/>|async_create_flow(handler_key: str): data_entry_flow.FlowHandler<br ALIGN="LEFT"/>async_finish_flow(flow: data_entry_flow.FlowHandler, result: FlowResult): FlowResult<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.providers.AuthProvider" [color="black", fontcolor="black", label=<{AuthProvider|DEFAULT_TITLE : str<br ALIGN="LEFT"/>config : dict[str, Any]<br ALIGN="LEFT"/>hass : HomeAssistant<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>store<br ALIGN="LEFT"/>support_mfa<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>|async_create_credentials(data: dict[str, str]): Credentials<br ALIGN="LEFT"/>async_credentials(): list[Credentials]<br ALIGN="LEFT"/><I>async_get_or_create_credentials</I>(flow_result: Mapping[str, str]): Credentials<br ALIGN="LEFT"/><I>async_initialize</I>(): None<br ALIGN="LEFT"/><I>async_login_flow</I>(context: dict[str, Any] | None): LoginFlow<br ALIGN="LEFT"/><I>async_user_meta_for_credentials</I>(credentials: Credentials): UserMeta<br ALIGN="LEFT"/><I>async_validate_refresh_token</I>(refresh_token: RefreshToken, remote_ip: str | None): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.auth_store.AuthStore" [color="black", fontcolor="black", label=<{AuthStore|hass : HomeAssistant<br ALIGN="LEFT"/>|async_activate_user(user: models.User): None<br ALIGN="LEFT"/>async_create_refresh_token(user: models.User, client_id: str | None, client_name: str | None, client_icon: str | None, token_type: str, access_token_expiration: timedelta, credential: models.Credentials | None): models.RefreshToken<br ALIGN="LEFT"/>async_create_user(name: str | None, is_owner: bool | None, is_active: bool | None, system_generated: bool | None, credentials: models.Credentials | None, group_ids: list[str] | None, local_only: bool | None): models.User<br ALIGN="LEFT"/>async_deactivate_user(user: models.User): None<br ALIGN="LEFT"/>async_get_group(group_id: str): models.Group \| None<br ALIGN="LEFT"/>async_get_groups(): list[models.Group]<br ALIGN="LEFT"/>async_get_refresh_token(token_id: str): models.RefreshToken \| None<br ALIGN="LEFT"/>async_get_refresh_token_by_token(token: str): models.RefreshToken \| None<br ALIGN="LEFT"/>async_get_user(user_id: str): models.User \| None<br ALIGN="LEFT"/>async_get_users(): list[models.User]<br ALIGN="LEFT"/>async_link_user(user: models.User, credentials: models.Credentials): None<br ALIGN="LEFT"/>async_log_refresh_token_usage(refresh_token: models.RefreshToken, remote_ip: str | None): None<br ALIGN="LEFT"/>async_remove_credentials(credentials: models.Credentials): None<br ALIGN="LEFT"/>async_remove_refresh_token(refresh_token: models.RefreshToken): None<br ALIGN="LEFT"/>async_remove_user(user: models.User): None<br ALIGN="LEFT"/>async_update_user(user: models.User, name: str | None, is_active: bool | None, group_ids: list[str] | None, local_only: bool | None): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.providers.command_line.CommandLineAuthProvider" [color="black", fontcolor="black", label=<{CommandLineAuthProvider|ALLOWED_META_KEYS : tuple<br ALIGN="LEFT"/>DEFAULT_TITLE : str<br ALIGN="LEFT"/>|async_get_or_create_credentials(flow_result: Mapping[str, str]): Credentials<br ALIGN="LEFT"/>async_login_flow(context: dict[str, Any] | None): LoginFlow<br ALIGN="LEFT"/>async_user_meta_for_credentials(credentials: Credentials): UserMeta<br ALIGN="LEFT"/>async_validate_login(username: str, password: str): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.providers.command_line.CommandLineLoginFlow" [color="black", fontcolor="black", label=<{CommandLineLoginFlow|<br ALIGN="LEFT"/>|async_step_init(user_input: dict[str, str] | None): FlowResult<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.models.Credentials" [color="black", fontcolor="black", label=<{Credentials|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"homeassistant.auth.providers.homeassistant.Data" [color="black", fontcolor="black", label=<{Data|hass : HomeAssistant<br ALIGN="LEFT"/>is_legacy : bool<br ALIGN="LEFT"/>users<br ALIGN="LEFT"/>|add_auth(username: str, password: str): None<br ALIGN="LEFT"/>async_load(): None<br ALIGN="LEFT"/>async_remove_auth(username: str): None<br ALIGN="LEFT"/>async_save(): None<br ALIGN="LEFT"/>change_password(username: str, new_password: str): None<br ALIGN="LEFT"/>hash_password(password: str, for_storage: bool): bytes<br ALIGN="LEFT"/>normalize_username(username: str): str<br ALIGN="LEFT"/>validate_login(username: str, password: str): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.providers.insecure_example.ExampleAuthProvider" [color="black", fontcolor="black", label=<{ExampleAuthProvider|<br ALIGN="LEFT"/>|async_get_or_create_credentials(flow_result: Mapping[str, str]): Credentials<br ALIGN="LEFT"/>async_login_flow(context: dict[str, Any] | None): LoginFlow<br ALIGN="LEFT"/>async_user_meta_for_credentials(credentials: Credentials): UserMeta<br ALIGN="LEFT"/>async_validate_login(username: str, password: str): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.providers.insecure_example.ExampleLoginFlow" [color="black", fontcolor="black", label=<{ExampleLoginFlow|<br ALIGN="LEFT"/>|async_step_init(user_input: dict[str, str] | None): FlowResult<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.models.Group" [color="black", fontcolor="black", label=<{Group|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"homeassistant.auth.providers.homeassistant.HassAuthProvider" [color="black", fontcolor="black", label=<{HassAuthProvider|DEFAULT_TITLE : str<br ALIGN="LEFT"/>data : Optional[Data \| None]<br ALIGN="LEFT"/>|async_add_auth(username: str, password: str): None<br ALIGN="LEFT"/>async_change_password(username: str, new_password: str): None<br ALIGN="LEFT"/>async_get_or_create_credentials(flow_result: Mapping[str, str]): Credentials<br ALIGN="LEFT"/>async_initialize(): None<br ALIGN="LEFT"/>async_login_flow(context: dict[str, Any] | None): LoginFlow<br ALIGN="LEFT"/>async_remove_auth(username: str): None<br ALIGN="LEFT"/>async_user_meta_for_credentials(credentials: Credentials): UserMeta<br ALIGN="LEFT"/>async_validate_login(username: str, password: str): None<br ALIGN="LEFT"/>async_will_remove_credentials(credentials: Credentials): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.providers.homeassistant.HassLoginFlow" [color="black", fontcolor="black", label=<{HassLoginFlow|<br ALIGN="LEFT"/>|async_step_init(user_input: dict[str, str] | None): FlowResult<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.mfa_modules.insecure_example.InsecureExampleModule" [color="black", fontcolor="black", label=<{InsecureExampleModule|DEFAULT_TITLE : str<br ALIGN="LEFT"/>input_schema<br ALIGN="LEFT"/>setup_schema<br ALIGN="LEFT"/>|async_depose_user(user_id: str): None<br ALIGN="LEFT"/>async_is_user_setup(user_id: str): bool<br ALIGN="LEFT"/>async_setup_flow(user_id: str): SetupFlow<br ALIGN="LEFT"/>async_setup_user(user_id: str, setup_data: Any): Any<br ALIGN="LEFT"/>async_validate(user_id: str, user_input: dict[str, Any]): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.providers.homeassistant.InvalidAuth" [color="black", fontcolor="red", label=<{InvalidAuth|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"homeassistant.auth.InvalidAuthError" [color="black", fontcolor="red", label=<{InvalidAuthError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"homeassistant.auth.providers.insecure_example.InvalidAuthError" [color="black", fontcolor="red", label=<{InvalidAuthError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"homeassistant.auth.providers.legacy_api_password.InvalidAuthError" [color="black", fontcolor="red", label=<{InvalidAuthError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"homeassistant.auth.providers.command_line.InvalidAuthError" [color="black", fontcolor="red", label=<{InvalidAuthError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"homeassistant.auth.InvalidProvider" [color="black", fontcolor="red", label=<{InvalidProvider|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"homeassistant.auth.providers.homeassistant.InvalidUser" [color="black", fontcolor="red", label=<{InvalidUser|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"homeassistant.auth.providers.trusted_networks.InvalidUserError" [color="black", fontcolor="red", label=<{InvalidUserError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"homeassistant.auth.providers.legacy_api_password.LegacyApiPasswordAuthProvider" [color="black", fontcolor="black", label=<{LegacyApiPasswordAuthProvider|DEFAULT_TITLE : str<br ALIGN="LEFT"/>api_password<br ALIGN="LEFT"/>|async_get_or_create_credentials(flow_result: Mapping[str, str]): Credentials<br ALIGN="LEFT"/>async_login_flow(context: dict[str, Any] | None): LoginFlow<br ALIGN="LEFT"/>async_user_meta_for_credentials(credentials: Credentials): UserMeta<br ALIGN="LEFT"/>async_validate_login(password: str): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.providers.legacy_api_password.LegacyLoginFlow" [color="black", fontcolor="black", label=<{LegacyLoginFlow|<br ALIGN="LEFT"/>|async_step_init(user_input: dict[str, str] | None): FlowResult<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.providers.LoginFlow" [color="black", fontcolor="black", label=<{LoginFlow|available_mfa_modules : dict[str, str]<br ALIGN="LEFT"/>created_at<br ALIGN="LEFT"/>credential : Optional[Credentials \| None]<br ALIGN="LEFT"/>invalid_mfa_times : int<br ALIGN="LEFT"/>user : Optional[User \| None]<br ALIGN="LEFT"/>|async_finish(flow_result: Any): FlowResult<br ALIGN="LEFT"/><I>async_step_init</I>(user_input: dict[str, str] | None): FlowResult<br ALIGN="LEFT"/>async_step_mfa(user_input: dict[str, str] | None): FlowResult<br ALIGN="LEFT"/>async_step_select_mfa_module(user_input: dict[str, str] | None): FlowResult<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.mfa_modules.MultiFactorAuthModule" [color="black", fontcolor="black", label=<{MultiFactorAuthModule|DEFAULT_TITLE : str<br ALIGN="LEFT"/>MAX_RETRY_TIME : int<br ALIGN="LEFT"/>config : dict[str, Any]<br ALIGN="LEFT"/>hass : HomeAssistant<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>input_schema<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>type<br ALIGN="LEFT"/>|<I>async_depose_user</I>(user_id: str): None<br ALIGN="LEFT"/><I>async_is_user_setup</I>(user_id: str): bool<br ALIGN="LEFT"/><I>async_setup_flow</I>(user_id: str): SetupFlow<br ALIGN="LEFT"/><I>async_setup_user</I>(user_id: str, setup_data: Any): Any<br ALIGN="LEFT"/><I>async_validate</I>(user_id: str, user_input: dict[str, Any]): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.mfa_modules.notify.NotifyAuthModule" [color="black", fontcolor="black", label=<{NotifyAuthModule|DEFAULT_TITLE : str<br ALIGN="LEFT"/>input_schema<br ALIGN="LEFT"/>|async_depose_user(user_id: str): None<br ALIGN="LEFT"/>async_initialize_login_mfa_step(user_id: str): None<br ALIGN="LEFT"/>async_is_user_setup(user_id: str): bool<br ALIGN="LEFT"/>async_notify(code: str, notify_service: str, target: str | None): None<br ALIGN="LEFT"/>async_notify_user(user_id: str, code: str): None<br ALIGN="LEFT"/>async_setup_flow(user_id: str): SetupFlow<br ALIGN="LEFT"/>async_setup_user(user_id: str, setup_data: Any): Any<br ALIGN="LEFT"/>async_validate(user_id: str, user_input: dict[str, Any]): bool<br ALIGN="LEFT"/>aync_get_available_notify_services(): list[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.mfa_modules.notify.NotifySetting" [color="black", fontcolor="black", label=<{NotifySetting|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"homeassistant.auth.mfa_modules.notify.NotifySetupFlow" [color="black", fontcolor="black", label=<{NotifySetupFlow|<br ALIGN="LEFT"/>|async_step_init(user_input: dict[str, str] | None): FlowResult<br ALIGN="LEFT"/>async_step_setup(user_input: dict[str, str] | None): FlowResult<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.permissions.models.PermissionLookup" [color="black", fontcolor="black", label=<{PermissionLookup|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"homeassistant.auth.permissions.PolicyPermissions" [color="black", fontcolor="black", label=<{PolicyPermissions|<br ALIGN="LEFT"/>|access_all_entities(key: str): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.models.RefreshToken" [color="black", fontcolor="black", label=<{RefreshToken|credential<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"homeassistant.auth.mfa_modules.SetupFlow" [color="black", fontcolor="black", label=<{SetupFlow|<br ALIGN="LEFT"/>|async_step_init(user_input: dict[str, str] | None): FlowResult<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.mfa_modules.totp.TotpAuthModule" [color="black", fontcolor="black", label=<{TotpAuthModule|DEFAULT_TITLE : str<br ALIGN="LEFT"/>MAX_RETRY_TIME : int<br ALIGN="LEFT"/>input_schema<br ALIGN="LEFT"/>|async_depose_user(user_id: str): None<br ALIGN="LEFT"/>async_is_user_setup(user_id: str): bool<br ALIGN="LEFT"/>async_setup_flow(user_id: str): SetupFlow<br ALIGN="LEFT"/>async_setup_user(user_id: str, setup_data: Any): str<br ALIGN="LEFT"/>async_validate(user_id: str, user_input: dict[str, Any]): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.mfa_modules.totp.TotpSetupFlow" [color="black", fontcolor="black", label=<{TotpSetupFlow|<br ALIGN="LEFT"/>|async_step_init(user_input: dict[str, str] | None): FlowResult<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.providers.trusted_networks.TrustedNetworksAuthProvider" [color="black", fontcolor="black", label=<{TrustedNetworksAuthProvider|DEFAULT_TITLE : str<br ALIGN="LEFT"/>support_mfa<br ALIGN="LEFT"/>trusted_networks<br ALIGN="LEFT"/>trusted_proxies<br ALIGN="LEFT"/>trusted_users<br ALIGN="LEFT"/>|async_get_or_create_credentials(flow_result: Mapping[str, str]): Credentials<br ALIGN="LEFT"/>async_login_flow(context: dict[str, Any] | None): LoginFlow<br ALIGN="LEFT"/><I>async_user_meta_for_credentials</I>(credentials: Credentials): UserMeta<br ALIGN="LEFT"/>async_validate_access(ip_addr: IPAddress): None<br ALIGN="LEFT"/>async_validate_refresh_token(refresh_token: RefreshToken, remote_ip: str | None): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.providers.trusted_networks.TrustedNetworksLoginFlow" [color="black", fontcolor="black", label=<{TrustedNetworksLoginFlow|<br ALIGN="LEFT"/>|async_step_init(user_input: dict[str, str] | None): FlowResult<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.models.User" [color="black", fontcolor="black", label=<{User|is_admin<br ALIGN="LEFT"/>permissions<br ALIGN="LEFT"/>|invalidate_permission_cache(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.models.UserMeta" [color="black", fontcolor="black", label=<{UserMeta|is_active : bool<br ALIGN="LEFT"/>name : str \| None<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"homeassistant.auth.permissions._OwnerPermissions" [color="black", fontcolor="black", label=<{_OwnerPermissions|<br ALIGN="LEFT"/>|access_all_entities(key: str): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.jwt_wrapper._PyJWSWithLoadCache" [color="black", fontcolor="black", label=<{_PyJWSWithLoadCache|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"homeassistant.auth.jwt_wrapper._PyJWTWithVerify" [color="black", fontcolor="black", label=<{_PyJWTWithVerify|<br ALIGN="LEFT"/>|decode_payload(jwt: str, key: str, options: dict[str, Any], algorithms: list[str]): dict[str, Any]<br ALIGN="LEFT"/>verify_and_decode(jwt: str, key: str, algorithms: list[str], issuer: str | None, leeway: int | float | timedelta, options: dict[str, Any] | None): dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"homeassistant.auth.permissions.PolicyPermissions" -> "homeassistant.auth.permissions.AbstractPermissions" [arrowhead="empty", arrowtail="none"];
"homeassistant.auth.permissions._OwnerPermissions" -> "homeassistant.auth.permissions.AbstractPermissions" [arrowhead="empty", arrowtail="none"];
"homeassistant.auth.AuthManagerFlowManager" -> "homeassistant.auth.AuthManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="login_flow", style="solid"];
"homeassistant.auth.permissions.models.PermissionLookup" -> "homeassistant.auth.auth_store.AuthStore" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_perm_lookup", style="solid"];
"homeassistant.auth.AuthManager" -> "homeassistant.auth.AuthManagerFlowManager" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="auth_manager", style="solid"];
"homeassistant.auth.auth_store.AuthStore" -> "homeassistant.auth.AuthManager" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_store", style="solid"];
"homeassistant.auth.auth_store.AuthStore" -> "homeassistant.auth.providers.AuthProvider" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="store", style="solid"];
"homeassistant.auth.mfa_modules.MultiFactorAuthModule" -> "homeassistant.auth.mfa_modules.SetupFlow" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_auth_module", style="solid"];
"homeassistant.auth.mfa_modules.notify.NotifyAuthModule" -> "homeassistant.auth.mfa_modules.notify.NotifySetupFlow" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_auth_module", style="solid"];
"homeassistant.auth.mfa_modules.totp.TotpAuthModule" -> "homeassistant.auth.mfa_modules.totp.TotpSetupFlow" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_auth_module", style="solid"];
"homeassistant.auth.models.User" -> "homeassistant.auth.mfa_modules.totp.TotpSetupFlow" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_user", style="solid"];
"homeassistant.auth.permissions.models.PermissionLookup" -> "homeassistant.auth.permissions.PolicyPermissions" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_perm_lookup", style="solid"];
"homeassistant.auth.providers.AuthProvider" -> "homeassistant.auth.providers.LoginFlow" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_auth_provider", style="solid"];
"homeassistant.auth.providers.homeassistant.Data" -> "homeassistant.auth.providers.homeassistant.HassAuthProvider" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="data", style="solid"];
}
