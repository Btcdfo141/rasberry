# serializer version: 1
# name: test_get_agent_info
  dict({
    'id': 'mock-entry',
    'name': 'Mock Title',
  })
# ---
# name: test_get_agent_info.1
  dict({
    'id': 'homeassistant',
    'name': 'Home Assistant',
  })
# ---
# name: test_get_agent_info.2
  dict({
    'id': 'mock-entry',
    'name': 'Mock Title',
  })
# ---
# name: test_get_agent_info.3
  dict({
    'id': 'mock-entry',
    'name': 'test',
  })
# ---
# name: test_get_agent_list
  dict({
    'agents': list([
      dict({
        'id': 'homeassistant',
        'name': 'Home Assistant',
        'supported_languages': list([
          'ar',
          'bg',
          'bn',
          'ca',
          'cs',
          'da',
          'de',
          'de-CH',
          'el',
          'en',
          'es',
          'fa',
          'fi',
          'fr',
          'fr-CA',
          'gl',
          'gu',
          'he',
          'hi',
          'hr',
          'hu',
          'id',
          'is',
          'it',
          'ka',
          'kn',
          'ko',
          'lb',
          'lt',
          'lv',
          'ml',
          'mn',
          'ms',
          'nb',
          'nl',
          'pl',
          'pt',
          'pt-br',
          'ro',
          'ru',
          'sk',
          'sl',
          'sr',
          'sv',
          'sw',
          'te',
          'tr',
          'uk',
          'ur',
          'vi',
          'zh-cn',
          'zh-hk',
          'zh-tw',
        ]),
      }),
      dict({
        'id': 'mock-entry',
        'name': 'Mock Title',
        'supported_languages': list([
          'smurfish',
        ]),
      }),
      dict({
        'id': 'mock-entry-support-all',
        'name': 'Mock Title',
        'supported_languages': '*',
      }),
    ]),
  })
# ---
# name: test_get_agent_list.1
  dict({
    'agents': list([
      dict({
        'id': 'homeassistant',
        'name': 'Home Assistant',
        'supported_languages': list([
        ]),
      }),
      dict({
        'id': 'mock-entry',
        'name': 'Mock Title',
        'supported_languages': list([
          'smurfish',
        ]),
      }),
      dict({
        'id': 'mock-entry-support-all',
        'name': 'Mock Title',
        'supported_languages': '*',
      }),
    ]),
  })
# ---
# name: test_get_agent_list.2
  dict({
    'agents': list([
      dict({
        'id': 'homeassistant',
        'name': 'Home Assistant',
        'supported_languages': list([
          'en',
        ]),
      }),
      dict({
        'id': 'mock-entry',
        'name': 'Mock Title',
        'supported_languages': list([
        ]),
      }),
      dict({
        'id': 'mock-entry-support-all',
        'name': 'Mock Title',
        'supported_languages': '*',
      }),
    ]),
  })
# ---
# name: test_get_agent_list.3
  dict({
    'agents': list([
      dict({
        'id': 'homeassistant',
        'name': 'Home Assistant',
        'supported_languages': list([
          'en',
        ]),
      }),
      dict({
        'id': 'mock-entry',
        'name': 'Mock Title',
        'supported_languages': list([
        ]),
      }),
      dict({
        'id': 'mock-entry-support-all',
        'name': 'Mock Title',
        'supported_languages': '*',
      }),
    ]),
  })
# ---
# name: test_get_agent_list.4
  dict({
    'agents': list([
      dict({
        'id': 'homeassistant',
        'name': 'Home Assistant',
        'supported_languages': list([
          'de',
          'de-CH',
        ]),
      }),
      dict({
        'id': 'mock-entry',
        'name': 'Mock Title',
        'supported_languages': list([
        ]),
      }),
      dict({
        'id': 'mock-entry-support-all',
        'name': 'Mock Title',
        'supported_languages': '*',
      }),
    ]),
  })
# ---
# name: test_get_agent_list.5
  dict({
    'agents': list([
      dict({
        'id': 'homeassistant',
        'name': 'Home Assistant',
        'supported_languages': list([
          'de-CH',
          'de',
        ]),
      }),
      dict({
        'id': 'mock-entry',
        'name': 'Mock Title',
        'supported_languages': list([
        ]),
      }),
      dict({
        'id': 'mock-entry-support-all',
        'name': 'Mock Title',
        'supported_languages': '*',
      }),
    ]),
  })
# ---
# name: test_ws_get_agent_info
  dict({
    'attribution': dict({
      'name': 'Mock assistant',
      'url': 'https://assist.me',
    }),
  })
# ---
# name: test_ws_get_agent_info.1
  dict({
    'attribution': None,
  })
# ---
# name: test_ws_get_agent_info.2
  dict({
    'attribution': dict({
      'name': 'Mock assistant',
      'url': 'https://assist.me',
    }),
  })
# ---
# name: test_ws_get_agent_info.3
  dict({
    'code': 'invalid_format',
    'message': "invalid agent ID for dictionary value @ data['agent_id']. Got 'not_exist'",
  })
# ---
# name: test_ws_hass_agent_debug
  dict({
    'results': list([
      dict({
        'context': dict({
          'domain': 'light',
        }),
        'entities': dict({
          'name': dict({
            'name': 'name',
            'text': 'my cool light',
            'value': 'my cool light',
          }),
        }),
        'entities_list': list([
          dict({
            'name': 'name',
            'text': 'my cool light',
            'value': 'my cool light',
          }),
        ]),
        'intent': dict({
          'data': list([
            dict({
              'excludes_context': dict({
              }),
              'requires_context': dict({
                'domain': 'scene',
              }),
              'response': 'scene',
              'sentence_texts': list([
                '[activate|<turn>] <name> [scene] [on]',
              ]),
              'slots': dict({
                'domain': 'scene',
              }),
            }),
            dict({
              'excludes_context': dict({
              }),
              'requires_context': dict({
              }),
              'response': 'lights_area',
              'sentence_texts': list([
                '<turn> on [all] <light> in <area>',
                '<turn> on [all] <area> <light>',
                '[<turn>] [all] <area> <light> on',
                '[<turn>] [all] <light> [in] <area> on',
                'activate [all] <light> [in] <area>',
                'activate [all] <area> <light>',
              ]),
              'slots': dict({
                'domain': 'light',
              }),
            }),
            dict({
              'excludes_context': dict({
              }),
              'requires_context': dict({
                'domain': 'cover',
              }),
              'response': 'cover',
              'sentence_texts': list([
                '<open> <name> [in <area>]',
              ]),
              'slots': dict({
              }),
            }),
            dict({
              'excludes_context': dict({
              }),
              'requires_context': dict({
              }),
              'response': 'cover_device_class',
              'sentence_texts': list([
                '<open> [the] garage door',
              ]),
              'slots': dict({
                'device_class': 'garage',
                'domain': 'cover',
              }),
            }),
            dict({
              'excludes_context': dict({
              }),
              'requires_context': dict({
              }),
              'response': 'cover_device_class',
              'sentence_texts': list([
                '<open> [the] {cover_classes:device_class} in <area>',
                '<open> <area> {cover_classes:device_class}',
              ]),
              'slots': dict({
                'domain': 'cover',
              }),
            }),
            dict({
              'excludes_context': dict({
              }),
              'requires_context': dict({
              }),
              'response': 'fans_area',
              'sentence_texts': list([
                '<turn> on [all] [the] fan[s] in <area>',
                '<turn> on <area> fan[s]',
                '[<turn>] [all] <area> fan[s] on',
                'activate [all] <area> fan[s]',
                'activate [all] fan[s] [in] <area>',
              ]),
              'slots': dict({
                'domain': 'fan',
                'name': 'all',
              }),
            }),
            dict({
              'excludes_context': dict({
              }),
              'requires_context': dict({
                'domain': 'lock',
              }),
              'response': 'lock',
              'sentence_texts': list([
                'lock <name> [in <area>]',
              ]),
              'slots': dict({
              }),
            }),
            dict({
              'excludes_context': dict({
              }),
              'requires_context': dict({
              }),
              'response': 'lock',
              'sentence_texts': list([
                'lock [all] [the] [locks|doors] [in] <area>',
                'lock [all] <area> [locks|doors]',
              ]),
              'slots': dict({
                'domain': 'lock',
                'name': 'all',
              }),
            }),
            dict({
              'excludes_context': dict({
              }),
              'requires_context': dict({
                'domain': 'script',
              }),
              'response': 'script',
              'sentence_texts': list([
                '[run|start|<turn>] <name> [script] [on]',
              ]),
              'slots': dict({
                'domain': 'script',
              }),
            }),
            dict({
              'excludes_context': dict({
                'domain': list([
                  'binary_sensor',
                  'cover',
                  'lock',
                  'scene',
                  'script',
                  'sensor',
                ]),
              }),
              'requires_context': dict({
              }),
              'response': None,
              'sentence_texts': list([
                '<turn> on <name> [light[s]|switch[es]]',
                '[<turn>] <name> [light[s]|switch[es]] [to] on',
                'activate <name> [light[s]|switch[es]]',
              ]),
              'slots': dict({
              }),
            }),
          ]),
          'name': 'HassTurnOn',
        }),
        'intent_data': dict({
          'excludes_context': dict({
            'domain': list([
              'binary_sensor',
              'cover',
              'lock',
              'scene',
              'script',
              'sensor',
            ]),
          }),
          'requires_context': dict({
          }),
          'response': None,
          'sentence_texts': list([
            '<turn> on <name> [light[s]|switch[es]]',
            '[<turn>] <name> [light[s]|switch[es]] [to] on',
            'activate <name> [light[s]|switch[es]]',
          ]),
          'slots': dict({
          }),
        }),
        'response': 'default',
      }),
      dict({
        'context': dict({
          'domain': 'light',
        }),
        'entities': dict({
          'name': dict({
            'name': 'name',
            'text': 'my cool light',
            'value': 'my cool light',
          }),
        }),
        'entities_list': list([
          dict({
            'name': 'name',
            'text': 'my cool light',
            'value': 'my cool light',
          }),
        ]),
        'intent': dict({
          'data': list([
            dict({
              'excludes_context': dict({
              }),
              'requires_context': dict({
              }),
              'response': 'fans_area',
              'sentence_texts': list([
                '<turn> off [all] [the] fan[s] in <area>',
                '<turn> off <area> fan[s]',
                '[<turn>] [all] <area> fan[s] off',
                '[<turn>] [all] [the] fan[s] [in] <area> off',
                'deactivate [all] [the] fan[s] [in] <area>',
                'deactivate [all] <area> [the] fan[s]',
              ]),
              'slots': dict({
                'domain': 'fan',
                'name': 'all',
              }),
            }),
            dict({
              'excludes_context': dict({
              }),
              'requires_context': dict({
              }),
              'response': 'light_all',
              'sentence_texts': list([
                '[<turn>] (all [the] fan[s] off|[the] fan[s] off everywhere)',
                'deactivate (all [the] fan[s]|[the] fan[s] everywhere)',
              ]),
              'slots': dict({
                'area': 'all',
                'domain': 'fan',
                'name': 'all',
              }),
            }),
            dict({
              'excludes_context': dict({
                'domain': list([
                  'binary_sensor',
                  'cover',
                  'lock',
                  'scene',
                  'script',
                  'sensor',
                ]),
              }),
              'requires_context': dict({
              }),
              'response': None,
              'sentence_texts': list([
                '<turn> off <name> [light[s]|switch[es]]',
                '[<turn>] <name> [light[s]|switch[es]] [to] off',
                'deactivate <name> [light[s]|switch[es]]',
              ]),
              'slots': dict({
              }),
            }),
            dict({
              'excludes_context': dict({
              }),
              'requires_context': dict({
              }),
              'response': 'lights_area',
              'sentence_texts': list([
                '<turn> off [all] <light> in <area>',
                '<turn> off [all] <area> <light>',
                '[<turn>] [all] <area> <light> off',
                '[<turn>] [all] <light> [in] <area> off',
                'deactivate [all] <light> [in] <area>',
                'deactivate [all] <area> <light>',
              ]),
              'slots': dict({
                'domain': 'light',
              }),
            }),
            dict({
              'excludes_context': dict({
              }),
              'requires_context': dict({
              }),
              'response': 'light_all',
              'sentence_texts': list([
                '[<turn>] (all <light> off|<light> off everywhere)',
                'deactivate (all <light>|<light> everywhere)',
              ]),
              'slots': dict({
                'area': 'all',
                'domain': 'light',
                'name': 'all',
              }),
            }),
            dict({
              'excludes_context': dict({
              }),
              'requires_context': dict({
                'domain': 'cover',
              }),
              'response': 'cover',
              'sentence_texts': list([
                '<close> <name> [in <area>]',
              ]),
              'slots': dict({
              }),
            }),
            dict({
              'excludes_context': dict({
              }),
              'requires_context': dict({
              }),
              'response': 'cover_device_class',
              'sentence_texts': list([
                '<close> [the] garage door',
              ]),
              'slots': dict({
                'device_class': 'garage',
                'domain': 'cover',
              }),
            }),
            dict({
              'excludes_context': dict({
              }),
              'requires_context': dict({
              }),
              'response': 'cover_device_class',
              'sentence_texts': list([
                '<close> [the] {cover_classes:device_class} in <area>',
                '<close> <area> {cover_classes:device_class}',
              ]),
              'slots': dict({
                'domain': 'cover',
              }),
            }),
            dict({
              'excludes_context': dict({
              }),
              'requires_context': dict({
                'domain': 'lock',
              }),
              'response': 'lock',
              'sentence_texts': list([
                'unlock <name> [in <area>]',
              ]),
              'slots': dict({
              }),
            }),
            dict({
              'excludes_context': dict({
              }),
              'requires_context': dict({
              }),
              'response': 'lock',
              'sentence_texts': list([
                'unlock [all] [the] [locks|doors] [in] <area>',
                'unlock [all] <area> [locks|doors]',
              ]),
              'slots': dict({
                'domain': 'lock',
                'name': 'all',
              }),
            }),
          ]),
          'name': 'HassTurnOff',
        }),
        'intent_data': dict({
          'excludes_context': dict({
            'domain': list([
              'binary_sensor',
              'cover',
              'lock',
              'scene',
              'script',
              'sensor',
            ]),
          }),
          'requires_context': dict({
          }),
          'response': None,
          'sentence_texts': list([
            '<turn> off <name> [light[s]|switch[es]]',
            '[<turn>] <name> [light[s]|switch[es]] [to] off',
            'deactivate <name> [light[s]|switch[es]]',
          ]),
          'slots': dict({
          }),
        }),
        'response': 'default',
      }),
      None,
    ]),
  })
# ---
