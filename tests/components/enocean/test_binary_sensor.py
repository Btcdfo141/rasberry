"""Test EnOcean light implementation."""
import unittest
from unittest.mock import MagicMock, patch

from enocean.protocol.packet import RadioPacket

from homeassistant.components import enocean as enocean_component
from homeassistant.components.enocean import binary_sensor
from homeassistant.const import STATE_OFF

from tests.common import get_test_home_assistant


class TestEnOceanBinarySensor(unittest.TestCase):
    """Test cases for the EnOcean binary sensor."""

    def setUp(self):
        """Initialize values for this test case class."""
        enocean_component.ENOCEAN_DONGLE = MagicMock()
        self.device = binary_sensor.EnOceanBinarySensor(
            [0xBB, 0xBB, 0xBB, 0xBB], 'my name', 'occupancy')
        self.hass = get_test_home_assistant()
        self.device.hass = self.hass

    def teardown_method(self, method):
        """Stop everything that was started."""
        self.hass.stop()

    def test_setup(self):
        """Test the sensor initialization."""
        assert self.device.name == 'my name'
        assert self.device.device_class == 'occupancy'
        assert self.device.state is STATE_OFF
        assert self.device.dev_id == [0xBB, 0xBB, 0xBB, 0xBB]


    @patch.object(binary_sensor.EnOceanBinarySensor,
                  'schedule_update_ha_state')
    def test_event(self, mock_update):
        """Test the event generated by a state change."""
        called = False
        event_data = None

        def handler(evt):
            nonlocal called
            nonlocal event_data
            called = True
            event_data = evt
        self.hass.bus.listen(binary_sensor.EVENT_BUTTON_PRESSED, handler)

        pkg = RadioPacket.create(rorg=0xF6, rorg_func=0x02, rorg_type=0x02,
                                 sender=[0xBB, 0xBB, 0xBB, 0xBB],
                                 EB=1, R1=0, R2=0, SA=0, T21=1, NU=1)
        self.device.value_changed(pkg)
        self.hass.block_till_done()

        assert mock_update.call_count == 1
        assert called
        assert event_data.data == {
            'id': [0xBB, 0xBB, 0xBB, 0xBB],
            'id_str': 'BB:BB:BB:BB',
            'entity_id': None,
            'name': 'my name',
            'pushed': 1,
            'which': 1,
            'onoff': 1
        }
