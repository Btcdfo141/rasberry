
class PulseHubEntity(Entity):
    """Define a generic Acmeda entity."""

    def __init__(self, hass, config_entry):
        """Initialize."""
        self._attrs = {ATTR_ATTRIBUTION: DEFAULT_ATTRIBUTION}
        self._device_class = None
        self._dispatcher_handlers = []
        self._name = None
        self.config_entry = config_entry
        self.hass = hass

    @property
    def device_class(self):
        """Return the device class."""
        return self._device_class

    @property
    def device_info(self):
        """Return device registry information for this entity."""
        return {
            "identifiers": {(DOMAIN, self.hub.mac)},
            "name": self.hub.name,
            "manufacturer": "Acmeda",
            "model": "Firmware {0}".format(
                self.hub.firmware_name,
            ),
            "sw_version": self.hub.firmware_name,
        }

    @property
    def device_state_attributes(self) -> dict:
        """Return the state attributes."""
        return self._attrs

    @property
    def name(self) -> str:
        """Return the name of the entity."""
        return self._name
        
    @property
    def host(self) -> str:
        """Return the host of this hub."""
        return self.config_entry.data["host"]    	

    async def async_setup(self, tries=0):
        """Set up a phue bridge based on host parameter."""
        host = self.host
        hass = self.hass

        pulsehub = PulseHub(
            host,
        )

        try:
			if not await hub.Connect():
				return False

			if not await hub.DoHandshake():
				return False

        except CannotConnect:
            LOGGER.error("Error connecting to the Pulse Hub at %s", host)
            raise ConfigEntryNotReady

        except Exception:  # pylint: disable=broad-except
            LOGGER.exception("Unknown error connecting with Pulse Hub at %s", host)
            return False

        self.api = pulsehub

        hass.async_create_task(
            hass.config_entries.async_forward_entry_setup(self.config_entry, "cover")
        )

        return True

    async def async_will_remove_from_hass(self):
        """Disconnect dispatcher listener when removed."""
        for handler in self._dispatcher_handlers:
            handler()